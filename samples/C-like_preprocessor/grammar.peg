{...
#!/usr/bin/ruby
# encoding: UTF-8

def parse(input)
  @last_newline_pos = 0
  @macros = Hash.new
  yy_parse(input)
end

}...

# Semantic value is processed text element.
text-element: String =
  / macro-definition:(val)
  / macro-name:(macro_name) { val = @macros

macro-definition: String =
  { macro_args = [] }
  (^ / &(at @last_newline_pos: newline)) "#" ` ` "define" ` ` macro-name:(macro_name) ` ` macro-body:(macro_body)
  newline
  { @macros[macro_name] = macro_body }
  { val = "" }
  ;

` ` =
  (
    / " "
    / newline
  )* ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

macro-body: String =
  < ("\" newline / !newline char)* >:val ;

comment: String =
  / < "//" char*? ($ / @:(@last_newline_pos) newline) >:val
  / < "/*" char*? "*/" >:val
  ;

string: String =
  < '"' ("\" char / char)*? '"' >:val ;

# NOTE: It also sets @last_newline_pos in case of success.
newline =
  @:(x)
  (
    / U+000D U+000A
    / U+000D
    / U+000A
  )
  { @last_newline_pos = x } ;

{
}