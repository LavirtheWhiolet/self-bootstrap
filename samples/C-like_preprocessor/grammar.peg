{...
#!/usr/bin/ruby
# encoding: UTF-8
require 'stringio'

}...

# Semantic value is processed lines.
lines: String =
  { val = "" }
  (line:(l) {val << l})*
  ;

# Semantic value is processed line.
line: String =
  -- read line --
  { line = "" }
  (line-item:(i) { line << i })*? < end-of-line >:(eol)
  -- process the line --
  {
    # Process the line until it stops to change.
    new_line = nil
    until new_line != line
      line = new_line
      new_line = process_line_once(StringIO.new(line))
    end
    # 
    val = new_line
  }
  -- don't forget end-of-line! --
  { val << eol }
  ;

process_line_once(io): String =
  { val = "" }
  (
    -- macro definition --
    / "#" ` `* "define" ` `+ macro-name:(macro_name) ` `+ < char* >:(macro_body)
      { @macros[macro_name] = macro_body }
    -- macro undefinition --
    / "#" ` `* "undef" ` `+ macro-name:(macro_name)
      { @macros.delete macro_name }
    -- ordinary line --
    / (
        line-item:(x)
        { x = @macros[x] if is_macro_name(StringIO.new(x)) and @macros.has_key?(x) }
        { val << x }
      )*
  )
  ;

line-item: String =
  / comment:(val)
  / string:(val)
  / "\" newline {val = ""}
  / macro-name:(val)
  / char:(val)
  ;

` ` = " " ;

is_macro_name(io): Boolean =
  / macro-name $ { val = true }
  / { val = false }
  ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

comment: String =
  / "//" char*? end-of-line
  / "/*" char*? "*/"
  ;

string: String =
  '"' ("\" char / char)*? '"' ;

newline =
  / U+000D U+000A
  / U+000D
  / U+000A
  ;

end-of-line =
  newline / $ ;

{...

File.open(ARGV[0]) do |input|
  yy_parse(input)
end

}...
