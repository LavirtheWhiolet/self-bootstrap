{...
#!/usr/bin/ruby
# encoding: UTF-8

@last_newline_pos = 0

}..

macro-definition =
  { macro_args = [] }
  (^ / &(at @last_newline_pos: newline))
  "#define" ` ` macro-name:(macro_name)

` ` = (" " / newline)* ;

any-char: String =
  / newline:(val)  # It is made separate for tracing newline positions.
  / char:(val)
  ;

comment: String =
  / < "//" char*? ($ / @:(@last_newline_pos) newline) >:val
  / < "/*" char*? "*/" >:val
  ;

string: String =
  < '"' ("\" char / char)*? '"' >:val ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

# Sets @last_newline_pos in case of success.
newline =
  @:(x)
  (
    / U+000D U+000A
    / U+000D
    / U+000A
  )
  { @last_newline_pos = x } ;
