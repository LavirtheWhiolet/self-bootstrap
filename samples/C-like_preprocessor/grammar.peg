{...
#!/usr/bin/ruby
# encoding: UTF-8
require 'stringio'


}...

# returns processed line.
line: String =
  { val = "" }
  (
    (
      / < string >:s
      / < comment >:s
      / "\" < newline >:s
      / macro-name:(macro_name)
        {
          s =
            if @macros.has_key? macro_name then
              lines(StringIO.new(@macros[macro_name]))
            else
              macro_name
            end
        }
      / macro-definition:(macro_definition)
        {
          macro_name, macro_body = *macro_definition
          @macros[macro_name] = macro_body
          s = ""
        }
      / < char >:s
    )
    { val << s }
  )*? end-of-line
  ;

macro-definition: [String, String] =
  `#` "define" ` ` macro-name:(macro_name) ` ` macro-body:(macro_body) end-of-line
  { @macros[macro_name] = macro_body } ;

macro-undefinition =
  `#` "undef" ` ` macro-name:(macro_name) end-of-line
  { @macros.delete macro_name } ;

`#` =
  "#" ` ` ;

` ` =
  " "* ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

comment: String =
  / "//" char*? end-of-line
  / "/*" char*? "*/"
  ;

string: String =
  '"' ("\" char / char)*? '"' ;

newline =
  / U+000D U+000A
  / U+000D
  / U+000A
  ;

end-of-line =
  newline / $ ;

{...

File.open(ARGV[0]) do |input|
  print Preprocessor.new.(input)
end

}...
