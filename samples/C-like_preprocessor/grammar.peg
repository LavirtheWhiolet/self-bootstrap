{...
#!/usr/bin/ruby
# encoding: UTF-8
require 'stringio'

class String
  
  def to_io
    StringIO.new(self)
  end

end

}...

preprocess(): String =
  { @macros = {} }
  expand_lines:val
  ;

expand_lines(): String =
  { val = "" }
  (expand_line:line { val << line })*? $
  ;

expand_line(): String =
  { line = "" }
  (line-item:li { line << li })*? end-of-line:eol
  { val = expand_line0(line.to_io) + eol }
  ;

expand_line0(): String =
  / process_macro_definition {val = ""}
  / process_macro_undefinition {val = ""}
  / expand_ordinary_line:val
    { 
      line, expanded = *val
      # If the line is expanded then we may need to expand it once again.
      if expanded then
        line = expand_lines(line.to_io)
      end
      val = line
    }
  ;

process_macro_definition() =
  { body = "" }
  "#" " "* "define" " "+ macro-name:name (" "+ <char*>:body)?
  { @macros[name] = body }
  ;

process_macro_undefinition() =
  "#" " "* "undef" " "+ macro-name:name
  { @macros.delete(name) }
  ;

# returns expanded line and a flag showing that there were macros in the line.
expand_ordinary_line(): [String, Boolean] =
  { val = ""; expanded = false }
  (
    line-item:li
    {
      val <<
        if is_macro_name(li.to_io) and @macros.has_key? li then
          expanded = true
          @macros[li]
        else
          li
        end
    }
  )*
  { val = [val, expanded] }
  ;

line-item: String =
  / comment:(val)
  / string:(val)
  / "\" newline:(val)
  / macro-name:(val)
  / char:(val)
  ;

is_macro_name(io): Boolean =
  / macro-name $ { val = true }
  / { val = false }
  ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val
  ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

comment: String =
  / < "//" char*? >:val &end-of-line
  / < "/*" char*? "*/" >:val
  ;

string: String =
  < '"' ("\" char / char)*? '"' >:val
  ;

newline: String =
  <
    / U+000D U+000A
    / U+000D
    / U+000A
  >:val
  ;

end-of-line: String =
  < newline / $ >:val
  ;

{...

File.open(ARGV[0]) do |input|
  print preprocess(input)
end

}...
