{...
#!/usr/bin/ruby
# encoding: UTF-8
require 'stringio'

}...

line: String =
  { val = "" }
  (line-item:(li) { val << li })*? end-of-line:(eol) {val << eol}
  ;

process_line(io): String =
  / "#" ` `* "define" ` `+ macro-name:(macro_name) ` `+ macro-body:(macro_body)
    {
      @macros[macro_name] = macro_body
      val = ""
    }
  / {val = ""} (line-item:(li) {val << li})*
  ;

macro-body: String =
  { val = "" }
  (
    line-item:(li)
    { val << li }
  )*
  ;
























# Semantic value is processed line.
line: String =
  { line = "" }
  (line-item:(li) { line << li })*? end-of-line:(eol) { val << eol }
  { val = process_line(StringIO.new(line)) }
  ;

process_line(io): String =
  -- macro definition --
  / "#" ` `* "define" ` `+ macro-name:(macro_name) ` `+ < char* >:(macro_body)
    { @macros[macro_name] = macro_body }
  -- ordinary line --
  / { val = ""; need_process_again = false }
    (
      line-item:(x)
      {
        # Expand macro (if it is macro).
        if is_macro_name(StringIO.new(x)) and @macros.has_key?(x) then
          x = @macros[x]
          need_process_again = true
        end
        # 
        val << x
      }
    )*
  ;

line-item: String =
  / comment:(val)
  / string:(val)
  / "\" newline {val = ""}
  / macro-name:(val)
  / char:(val)
  ;

` ` = " " ;

is_macro_name(io): Boolean =
  / macro-name $ { val = true }
  / { val = false }
  ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

comment: String =
  / "//" char*? end-of-line
  / "/*" char*? "*/"
  ;

string: String =
  '"' ("\" char / char)*? '"' ;

newline =
  / U+000D U+000A
  / U+000D
  / U+000A
  ;

end-of-line =
  < newline / $ >:val ;

{...

File.open(ARGV[0]) do |input|
  print Preprocessor.new.(input)
end

}...
