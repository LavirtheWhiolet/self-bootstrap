{...
#!/usr/bin/ruby
# encoding: UTF-8

def process input
  @last_newline_pos = 0
  @macros = Hash.new
  yy_parse(input)
end

}...

text =
  (text-element:(element) { print element })* ;

# Semantic value is processed text element.
text-element: String =
  / macro-definition
  / macro-name:(macro_name) { val = (@macros[macro_name] or macro_name) }
  / string:(val)
  / comment:(val)
  / < newline >:val  # It is required to track last newline position.
  / < char >:val
  ;

macro-definition =
  (^ / &(at @last_newline_pos: newline)) "#" ` ` "define" ` ` macro-name:(macro_name) ` ` macro-body:(macro_body)
  newline
  { @macros[macro_name] = macro_body }
  ;

` ` =
  (
    / " "
    / newline
  )* ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

macro-body: String =
  { val = "" }
  (
    (  
      / "\" < newline >:c
      / < !newline char >:c
    )
    { val << c }
  )* ;

comment: String =
  / < "//" char*? ($ / newline) >:val
  / < "/*" char*? "*/" >:val
  ;

string: String =
  < '"' ("\" char / char)*? '"' >:val ;

# NOTE: It also sets @last_newline_pos in case of success.
newline =
  @:(x)
  (
    / U+000D U+000A
    / U+000D
    / U+000A
  )
  { @last_newline_pos = x } ;

{...

File.open(ARGV[0]) do |input|
  process input
end

}...
