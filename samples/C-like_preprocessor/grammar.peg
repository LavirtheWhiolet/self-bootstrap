{...
#!/usr/bin/ruby
# encoding: UTF-8
require 'stringio'

}...

lines: String =
  { @macros = {} }
  { val = "" } (line:(line) { val << line })*? $ ;

line: String =
  -- read a line --
  { line = "" } (line-item:(li) { line << li })*? end-of-line:(eol)
  -- expand the line --
  {
    old_line = nil
    until old_line == line
      old_line = line
      line = line0(StringIO.new(line))
    end
  }
  -- form resultant value --
  { val = line + eol }
  ;

line0(): String =
  / macro-definition {val = ""}
  / macro-undefinition {val = ""}
  / ordinary-line:(val)
  ;

macro-definition =
  "#" ` `* "define" ` `+ macro-name:(macro_name) (` `+ <char*>:(macro_body) / "":(macro_body))
  { @macros[macro_name] = macro_body }
  ;

macro-undefinition =
  "#" ` `* "undef" ` `+ macro-name:(macro_name)
  { @macros.delete macro_name }
  ;

ordinary-line: String =
  { val = "" }
  (
    line-item:(li)
    {
      val <<
        if is_macro_name(StringIO.new(li)) and @macros.has_key? li then
          @macros[li]
        else
          li
        end
    }
  )* ;

line-item: String =
  / comment:(val)
  / string:(val)
  / "\" newline:(val)
  / macro-name:(val)
  / char:(val)
  ;

` ` = " " ;

is_macro_name(io): Boolean =
  / macro-name $ { val = true }
  / { val = false }
  ;

macro-name: String =
  < macro-name-start macro-name-middle* >:val ;

macro-name-start =
  / "a"..."z"
  / "A"..."Z"
  / "_"
  ;

macro-name-middle =
  / macro-name-start
  / "0"..."9"
  ;

comment: String =
  / < "//" char*? >:(val) &end-of-line
  / < "/*" char*? "*/" >:(val)
  ;

string: String =
  < '"' ("\" char / char)*? '"' >:(val) ;

newline: String =
  <
    / U+000D U+000A
    / U+000D
    / U+000A
  >:(val)
  ;

end-of-line: String =
  < newline / $ >:(val) ;

{...

File.open(ARGV[0]) do |input|
  print yy_parse(input)
end

}...
