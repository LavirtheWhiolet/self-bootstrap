{...
#!/usr/bin/ruby
# encoding: UTF-8

}...

#### Grammar ####

INI =
  { val = JSON.new }
  -- global keys --
  ( key-values :>> val )?
  -- sections --
  (
    section:(section)
    {
      val += ", " if not val.empty?
      val += section
    }
  )*
  -- post-process --
  { val = %({ #{val} }) }
  $ ;
  
section: JSON =
  -- header --
  ('[' < char*? >:section ']') EOL
  -- content --
  key-values:(content)
  -- output --
  { val = %(#{section.escape}: { #{content} }) };

key-values: JSON =
  { val = JSON.new }
  (
    / !$ empty-line
    / comment
    / key-value: key_value
      {
        key, value = *key_value
        key = key.strip; value = value.strip
        val += ", " if not val.empty?
        val += %("#{key.escape}": "#{value.escape}")
      }
  )*
  ;

key-value: [String, String] =
  white-space*
  -- key "=" --
  < (!EOL char)*? >:key white-space* "=" ]
  -- value --
  < char*? >:value white-space* EOL ]
  --
  { val = [key, value] } ;

empty-line = white-space* EOL ;

comment = white-space* (';' / '#') char*? EOL ;

EOL = newline / $;

white-space = ' ' ;

# Newline as specified in "Unicode Technical Report #13: Unicode Newline
# Guidelines" (http://unicode.org/unicode/standard/reports/tr13/tr13-5.html).
newline <-
  U+000D U+000A /
  U+000D /
  U+000A /
  U+0085 /
  U+000B /
  U+000C /
  U+2028 /
  U+2029 ;

#### Line and column calculating ####

{...

# [line, column] corresponding to position in +io+ (+pos+).
def line_and_column(pos, io)
  @pos = pos
  io.pos = 0
  return line_and_column0(io)
end

}...

# 
# It expects +@pos+ to be position in input and returns [line, column]
# corresponding to that position.
# 
line_and_column0(): [Integer, Integer] <-
  { current_line_and_column = [1, 1] }
  (
    @:current_pos
    { if current_pos == @pos then val = current_line_and_column.dup; end }
    (
      / newline { current_line_and_column[0] += 1; current_line_and_column[1] = 1 }
      / char { current_line_and_column[1] += 1 }
    )
  )*
  ;

{...


#### Auxiliary classes ####


JSON = String


class JSON
  
  def escape
    self.gsub("\"", "\\\"")
  end

end


#### Launcher ####

grammar_file = ARGV[0] or abort %(Usage: ruby #{__FILE__} grammar-file)
File.open(grammar_file) do |io|
  begin
    puts yy_parse(io)
  rescue YY_SyntaxError => e
    line, column = *line_and_column(e.pos, io)
    STDERR.puts %(#{grammar_file}:#{line}:#{column}: error: #{e.message})
    exit 1
  end
end

}...