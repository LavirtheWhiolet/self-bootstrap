%%
#!/usr/bin/ruby
# encoding: UTF-8

# This file is both runnable and "require"-able.


# 
class PEGParserGenerator
  
  # 
  # +input+ is IO. It must have working IO#pos, IO#pos= and IO#set_encoding()
  # methods.
  # 
  def call(input)
    # Initialize.
    @next_unique_number = 0
    # Parse grammar and generate the parser.
    yy_parse(input)
  end
  
  private
  
  HashMap = Hash
  
%%%% Grammar %%%%

---- Syntax ----

grammar <-
  {
    code = code("")
    rule_is_first = true
    method_names = HashMap.new
  }
  ` `
  (
    / rule:r
      {
        # 
        nonterminal, method_name, method_code = *r
        # 
        if rule_is_first
          code += auxiliary_parser_code(method_name)
          rule_is_first = false
        end
        # 
        method_names[nonterminal] = method_name
        code += method_code
      }
    / action:x
      {
        code += code(x)
      }
  )*
  $
  {
    code = link(code, method_names)
    print code
  } ;

expr: Code <-
  expr20:val ;

expr20: Code <-
  # Ordered choice.
  {
    single_expression = true
    remembered_pos_var = new_unique_variable_name
  }
  `/`? expr30:val (
    `/` expr30:val2
    {
      single_expression = false
      val = val + (code " or (@yy_input.pos = #{remembered_pos_var}; ") + val2 + (code ")")
    }
  )*
  {
    if not single_expression then
      val = (code "begin; #{remembered_pos_var} = @yy_input.pos; ") + val + (code "; end")
    end
  } ;

expr30: Code <-
  # Sequence.
  # One-side bracket.
  { code_parts = [] } 
  (
    / expr60:code_part  { code_parts.add code_part }
    / `]`  { code_parts = [sequence_code(code_parts)] }
  )+
  {val = sequence_code(code_parts)} ;

{...
  
  def sequence_code(sequence_parts)
    # 
    lazy_kleene_star_part_index =
      sequence_parts.find_index { |sequence_part| sequence_part.any? { |code_part| code_part.is_a? LazyRepeat::UnknownLookAheadCode } }
    # Compile parts after "*?" part as look ahead of the "*?" part
    # (if possible).
    if lazy_kleene_star_part_index and lazy_kleene_star_part_index != (sequence_parts.size - 1)
      lazy_kleene_star_part = sequence_parts[lazy_kleene_star_part_index]
      sequence_parts_after_lazy_kleene_star_part = sequence_parts[(lazy_kleene_star_part_index+1)..-1]
      lazy_kleene_star_part = lazy_kleene_star_part.replace(
        LazyRepeat::UnknownLookAheadCode,
        sequence_code(sequence_parts_after_lazy_kleene_star_part)
      )
      sequence_parts[lazy_kleene_star_part_index] = lazy_kleene_star_part
    end
    # Compile the code parts into sequence code!
    if sequence_parts.size == 1
      sequence_parts.first
    else
      code("(") + sequence_parts.reduce { |r, sequence_part| r + code(" and ") + sequence_part } + code(")")
    end
  end
  
}...

expr60: Code <-
  # Capture semantic value.
  expr70:c `:` capture-target-variable:var { val = capture_semantic_value_code(var, c) } /
  expr70:val ;

# TODO: Rename "action" rule to "Ruby-code".

expr70 <-
  # Predicate.
  / `&` action:c { val = positive_predicate_with_native_code_code(c) }
  / `&` expr70:val { val = positive_predicate_code(val) }
  / `!` expr70:val { val = code(%(not )) + positive_predicate_code(val) }
  / expr80:val
  ;

expr80: Code <-
  # Repetition.
  expr90:val (
    `*?` { val = lazy_repeat_code(val) } /
    `*` { val = repeat_many_times_code(val) } /
    `+` { val = repeat_at_least_once_code(val) } /
    `?` { val = optional_code(val) }
  )* ;

expr90: Code <-
  # Parentheses.
  `(` expr:val `)` /
  # Text capture.
  `<` expr:c `>` `:` capture-target-variable:var { val = capture_text_code(var, c) } /
  # Skip text.
  `>` expr:c `<` { val = skip_text_code(c) } /
  # 
  expr100:val ;

expr100: Code <-
  / char-range:r  { val = code "yy_char_range(#{r.begin.dump}, #{r.end.dump})" }
  / string:s  { val = code "yy_string(#{s.dump})" }
  / nonterminal:n  { val = UnknownMethodCall[n] }
  / `char` { val = code "@yy_input.getc" }  # IO#getc returns nil at end of input. That's OK for us.
  / action:a  { val = code "begin \n #{a} \n true \n end" }  # Newline must be present after action's body because it may include comments.
  / `$` { val = code "@yy_input.eof?" }
  / `^` { val = code "(@yy_input.pos == 0)" }
  / (
      / `@``=` Ruby-variable:(pos_variable)
      / `at` Ruby-variable:(pos_variable)
    ) `:`?
    { val = code "(@yy_input.pos = #{pos_variable}; true)" }
  / `@` { val = code "@yy_input.pos" }
  ;

rule: [Nonterminal, MethodName, Code] <-
  nonterminal:n (`:` rule-type)? `<-/=` expr:c `;`
  {
    method_name = new_unique_nonterminal_method_name
    val = [n, method_name, to_method_definition(c, method_name)]
  } ;

rule-type <-
  ((!`<-/=` char) ` `)+ ;

capture-target-variable: String <-
  / Ruby-variable:val
  / `(` Ruby-variable:val `)`
  ;

---- Lexemes ----

`%%` <-
  "%%" char*? (newline / $) ;

action: RubyCode <-
  (
    / "{" white-space* "..." (white-space*? newline)? < char*? >:val ("..." white-space* "}" / "}" white-space* "...")
    / < action-body >:val { val = val[1...-1] }
    / (
        `%%`
        < char*? >:val
        `%%`
      )
    / (
        `%%`
        < char* >:val
        $
      )
  )
  ` ` ;

action-body <-
  "{" (action-body / char)*? "}" ;

`<-/=` <- ("<-" / "=" / U+2190) ` `;
`:` <- ":" ` `;
`;` <- ";" ` `;
`/` <- "/" ` `;
`$` <- "$" ` `;
`^` <- "^" ` `;
`(` <- "(" ` `;
`)` <- ")" ` `;
`[` <- "[" ` `;
`]` <- "]" ` `;
`:` <- ":" ` `;
`<` <- "<" ` `;
`>` <- ">" ` `;
`*` <- "*" ` `;
`*?` <- "*?" ` `;
`?` <- "?" ` `;
`+` <- "+" ` `;
`&` <- "&" ` `;
`!` <- "!" ` `;
`@` <- "@" ` `;
`=` <- "=" ` `;

`char` <- "char" !nonterminal-middle ` `;
`at` <- "at" !nonterminal-middle ` `;
keyword <-
  / `char`
  / `at`
  ;

Ruby-variable: String <-
  < ("@" / "$")? Ruby-variable-start (Ruby-variable-middle)* >:val ` `;

Ruby-variable-start <-
  "a"..."z" /
  "_" ;

Ruby-variable-middle <-
  Ruby-variable-start /
  "0"..."9" ;

# TODO: Extract ` ` outside of the parentheses.
nonterminal: Nonterminal <-
  !keyword
  (
    < nonterminal-start (nonterminal-middle)* >:val ` ` /
    < "`" char*? "`" >:val ` `
  ) ;

nonterminal-start <-
  "a"..."z" /
  "A"..."Z" /
  "-" /
  "_" ;

nonterminal-middle <-
  nonterminal-start /
  "0"..."9" ;

char-range: Range[String] <-
  string:from ("..." / ".." / U+2026 / U+2025) ` ` string:to ` `
  { raise %("#{from}" or "#{to}" is not a character) if from.length != 1 or to.length != 1 }
  { val = from...to } ;

# TODO: Tell that all String-s are encoded in UTF-8.

string: String <-
  (
    "'" < char*? >:val "'" /
    '"' < char*? >:val '"' /
    Unicode-code:code { val = "" << code }
  )
  ` ` ;

Unicode-code: Integer <-
  "U+" < ("0"..."9" / "A"..."F")+ >:code { code  = code.to_i(16); raise %(U+#{code.to_s(16).upcase} is not supported) if code > 0x10FFFF }
  { val = code } ;

# Insignificant text.
` ` <-
  (white-space / comment)* ;

comment <-
  ("#" / "--") char*? (newline / $) ;

# White space as specified in "Unicode Standard Annex #44: Unicode Character
# Database" (http://www.unicode.org/reports/tr44, specifically
# http://www.unicode.org/Public/UNIDATA/PropList.txt).
white-space <-
  U+0009...U+000D /
  U+0020 /
  U+0085 /
  U+00A0 /
  U+1680 /
  U+180E /
  U+2000...U+200A /
  U+2028 /
  U+2029 /
  U+202F /
  U+205F /
  U+3000 ;

# Newline as specified in "Unicode Technical Report #13: Unicode Newline
# Guidelines" (http://unicode.org/unicode/standard/reports/tr13/tr13-5.html).
newline <-
  U+000D U+000A /
  U+000D /
  U+000A /
  U+0085 /
  U+000B /
  U+000C /
  U+2028 /
  U+2029 ;

%%%% Code %%%%
  
  def capture_semantic_value_code(var, code)
    result_var = new_unique_variable_name
    #
    code(%(begin
      #{result_var} = )) + code + code(%(
      if #{result_var} then
        #{var} = yy_from_pcv(#{result_var})
      end
      #{result_var}
    end))
  end
  
  def positive_predicate_with_native_code_code(native_code)
    code(%(begin \n #{native_code} \n end))  # Newlines are needed because native_code may contain comments.
  end
  
  def positive_predicate_code(code)
    stored_pos_var = new_unique_variable_name
    result_var = new_unique_variable_name
    #
    code(%(begin
      #{stored_pos_var} = @yy_input.pos
      #{result_var} = )) + code + code(%(
      @yy_input.pos = #{stored_pos_var}
      #{result_var}
    end))
  end
  
  def repeat_many_times_code(code)
    stored_pos_var = new_unique_variable_name
    #
    code(%(while true
      #{stored_pos_var} = @yy_input.pos
      if not )) + code + code(%( then
        @yy_input.pos = #{stored_pos_var}
        break true
      end
    end))
  end
  
  def repeat_at_least_once_code(code)
    code + code(%( and )) + repeat_many_times_code(code)
  end
  
  def optional_code(code)
    stored_pos_var = new_unique_variable_name
    #
    code(%(begin
      #{stored_pos_var} = @yy_input.pos
      if not )) + code + code(%( then
        @yy_input.pos = #{stored_pos_var}
      end
      true
    end))
  end
  
  def lazy_repeat_code(parsing_code)
    #
    original_pos_var = new_unique_variable_name
    result_var = new_unique_variable_name
    #
    code(%[ begin
      while true
        ###
        #{original_pos_var} = @yy_input.pos
        ### Look ahead.
        #{result_var} = ]) + LazyRepeat::UnknownLookAheadCode.new + code(%[
        @yy_input.pos = #{original_pos_var}
        break if #{result_var}
        ### Repeat one more time (if possible).
        #{result_var} = ]) + parsing_code + code(%[
        if not #{result_var} then
          @yy_input.pos = #{original_pos_var}
          break
        end
      end
      ### The repetition is always successful.
      true
    end ])
  end
  
  # returns code which captures text to specified variable.
  def capture_text_code(parsing_code, target_var)
    # Compile.
    start_pos_var = new_unique_variable_name
    end_pos_var = new_unique_variable_name
    code = code(%(begin
      #{target_var} = ""
      #{start_pos_var} = @yy_input.pos
      )) + parsing_code + code(%( and begin
        #{end_pos_var} = @yy_input.pos
        @yy_input.pos = #{start_pos_var}
        #{target_var} << @yy_input.read(#{end_pos_var} - #{start_pos_var}).force_encoding(Encoding::UTF_8)
      end
    end))
    # Replace inner unknown variables (if possible).
    code = code.map do |code|
      # 
      if code.is_a? UnknownVariable
        # 
        unknown_variable = code
        # 
        case unknown_variable.role
        when :start_pos then code(start_pos_var)
        when :end_pos then code(end_pos_var)
        when :target then code(target_var)
        end
      # 
      else
        code
      end
    end
    #
    return code
  end
  
  # returns Code which skips text being captured. The Code contains
  # UnknownVariable-s.
  def skip_text_code(parsing_code)
    code(%(begin
      # Remember position before stopping capture.
      )) + UnknownVariable[:end_pos] + code(%( = @yy_input.pos
      # Parse!
      )) + parsing_code + code(%( and
      begin
        # Capture what has been parsed before the skipping.
        @yy_input.pos = )) + UnknownVariable[:start_pos] + code(%(
        )) + UnknownVariable[:target] + code(" << @yy_input.read(") + UnknownVariable[:end_pos] + code(" - ") + UnknownVariable[:start_pos] + code(")") + code(%(.force_encoding(Encoding::UTF_8)
        # Restart capturing from the end of the skipping.
        )) + UnknownVariable[:start_pos] + code(%( = @yy_input.pos
      end
    end))
  end
  
  def auxiliary_parser_code(main_parsing_method_name)
    code %(
      
      # 
      # +input+ is IO. It must have working IO#pos, IO#pos= and
      # IO#set_encoding() methods.
      # 
      # It may raise YY_SyntaxError.
      # 
      def yy_parse(input)
        @yy_input = input
        @yy_input.set_encoding("UTF-8", "UTF-8")
        x = #{main_parsing_method_name} or raise YY_SyntaxError
      end
      
      # converts value to parser-compatible value (which is always non-false and
      # non-nil).
      def yy_to_pcv(value)
        if value.nil? then :yy_nil
        elsif value == false then :yy_false
        else value
        end
      end
      
      # converts value got by #yy_to_pcv() to actual value.
      def yy_from_pcv(value)
        if value == :yy_nil then nil
        elsif value == :yy_false then false
        else value
        end
      end
      
      def yy_string(string)
        # Read string.
        read_string = @yy_input.read(string.bytesize)
        return nil if not read_string
        read_string.force_encoding(Encoding::UTF_8)
        # 
        if read_string == string then return string
        else return nil
        end
      end
      
      def yy_char_range(from, to)
        # 
        c = @yy_input.getc
        return nil if not c
        # NOTE: c has UTF-8 encoding.
        # 
        if from <= c and c <= to then return c
        else return nil
        end
      end
      
      class YY_SyntaxError < Exception
      end
    )
  end
  
  # returns unique value on each call. The value starts with "yy_nonterm" and is
  # lowcase.
  def new_unique_nonterminal_method_name
    "yy_nonterm#{new_unique_number.to_s(36)}"
  end
  
  # returns unique number on each call.
  def new_unique_number
    result = @next_unique_number
    @next_unique_number += 1
    return result
  end
  
  # returns unique value on each call. The value starts with "yy_var" and is
  # lowcase.
  def new_unique_variable_name
    "yy_var#{new_unique_number.to_s(36)}"
  end
  
  # 
  # See source code.
  # 
  def link(code, method_names)
    code.map do |code_part|
      if code_part.is_a? UnknownMethodCall and method_names.has_key? code_part.nonterminal
        code "#{method_names[code_part.nonterminal]}()"
      else
        code_part
      end
    end
  end
  
  def to_method_definition(code, method_name)
    code("def #{method_name} \n") +
      code("val = :yy_nil \n") +
      code + code(" and yy_to_pcv(val) \n") +
    code("end \n")
  end
  
  RubyCode = String
  
  Nonterminal = String
  
  # TODO: Replace String with Nonterminal where it is needed.
  
  class Code
    
    # defines abstract method.
    def self.abstract(method)
      define_method(method) { |*args| raise %(method `#{method}' is abstract) }
    end
    
    abstract :to_s
    
    # Not overridable.
    def + other
      CodeConcatenation.new([self, other])
    end
    
    # 
    # passes every atomic Code comprising this Code and returns this Code with
    # the atomic Code-s replaced with what +block+ returns.
    # 
    def map(&block)
      block.(self)
    end
    
    # 
    # The same as Enumerable#reduce(initial) <tt>{ |memo, obj| block }</tt> or
    # Enumerable#reduce <tt>{ |memo, obj| block }</tt> where +obj+ is one of
    # atomic Code-s comprising this Code.
    # 
    # Not overridable.
    # 
    def reduce(initial = nil, &block)
      # TODO: Optimize.
      result = initial
      self.map { |code_part| result = block.(result, code_part); code_part }
      return result
    end
    
    # returns true if +predicate+ returns true for any atomic Code comprising
    # this code.
    def any?(&predicate)
      self.reduce(false) { |result, part| result or predicate.(part) }
    end
    
    # 
    # replaces each atomic Code which comprises this Code and is case-equal to
    # +pattern+ with +replacement+.
    # 
    def replace(pattern, replacement)
      self.map do |code_part|
        if pattern === code_part then
          replacement
        else
          code_part
        end
      end
    end
    
  end
  
  class CodeAsString < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(string)
      @string = string
    end
    
    def to_s
      @string
    end
    
    def inspect
      "#<CodeAsString: #{@string.inspect}>"
    end
    
  end
  
  # returns CodeAsString.
  def code(string)
    CodeAsString.new(string)
  end
  
  class CodeConcatenation < Code
    
    def initialize(parts)
      @parts = parts
    end
    
    def to_s
      @parts.map { |part| part.to_s }.join
    end
    
    def + other
      # Optimization.
      CodeConcatenation.new([*@parts, other])
    end
    
    def map(&block)
      CodeConcatenation.new(@parts.map { |part| part.map(&block) })
    end
    
    def inspect
      "#<CodeConcatenation: #{@parts.map { |p| p.inspect }.join(", ")}>"
    end
    
  end
  
  class UnknownMethodCall < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(nonterminal)
      @nonterminal = nonterminal
    end
    
    # Nonterminal associated with this UnknownMethodCall.
    attr_reader :nonterminal
    
    def to_s
      raise CodeCanNotBeDetermined.new self
    end
    
    def inspect
      "#<UnknownMethodCall: @nonterminal=#{@nonterminal.inspect}>"
    end
    
  end
  
  module LazyRepeat
    
    class UnknownLookAheadCode < Code
      
      def to_s
        raise CodeCanNotBeDetermined.new self
      end
      
      def inspect
        "#<LazyRepeat::UnknownLookAheadCode>"
      end
      
    end
    
  end
  
  class CodeCanNotBeDetermined < Exception
    
    def initialize(code)
      super %(code can not be determined: #{code.inspect})
      @code = code
    end
    
    attr_reader :code
    
  end
  
  class UnknownVariable < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(role)
      @role = role
    end
    
    attr_reader :role
    
    def to_s
      raise UnknownVarEncountered.new self
    end
    
  end
  
  class UnknownVariableEncountered < Exception
    
    def initialize(unknown_variable)
      super %(unknown variable is encountered (role: #{unknown_var.role}, requested name: "#{unknown_variable.requested_name}"))
      @unknown_variable = unknown_variable
    end
    
    attr_reader :unknown_variable
    
  end
  
end


class Array
  
  alias add <<
  
end


if $0 == __FILE__
  File.open(ARGV[0]) do |io|
    PEGParserGenerator.new.call(io)
  end
end
