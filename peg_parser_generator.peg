%%
#!/usr/bin/ruby
# encoding: UTF-8


class PEGParserGenerator
  
  def call(input)
    # Initialize.
    @next_unique_number = 0
    # Parse!
    p yy_parse(input)
  end
  
  private
  
  HashMap = Hash
  
%%

---- Syntax ----

# NOTE: Semantic value of all "expr..." rules is Code.

grammar <-
  ` ` val:expr ;

expr <- val:expr30 ;

expr10 <-
  # Rules introduction.
  (
    r:rules `in` val:expr10 /
    val:expr30 `where` r:rules
  )
  {
    rules = r
    method_name = HashMap.new { |nonterminal| method_name[nonterminal] = new_unique_nonterminal_method_name }
    r.each do |rule_nonterminal, rule_code|
      val = val.replace_unknown_code(rule_nonterminal, code("#{method_name[rule_nonterminal]"))
    end
  } ;

expr30 <-
  # Sequence.
  val:expr100 (val2:expr100 { val += code(" and ") + val2 })* ;

expr100 <-
  s:string  { val = code %(yy_string(#{s.force_encoding("UTF-8").dump})) } /
  n:nonterminal  { val = UnknownCode[n] } ;

# Semantic value is map from rule's left part (nonterminal) to
# its right part (code).
rules <-
  { val = HashMap.new }
  (
    r:rule
    {
      nonterminal, code = *r
      raise %(rule "#{nonterminal}" is already defined) if val.has_key? nonterminal
      val[nonterminal] = code
    }
  )*
  ;

# Semantic value is [nonterminal, right part code].
rule <-
  n:nonterminal `<-` c:expr `;`
  { val = [n, c] } ;

---- Lexemes ----

`<-` <- ("<-" / "=") ` `;
`;` <- ";" ` `;
`where` <- "where" !nonterminal-middle ` `;
`in` <- "in" !nonterminal-middle ` `;

# Semantic value is nonterminal's name.
nonterminal <-
  val:< nonterminal-start (nonterminal-middle)* > ` ` /
  val:< "`" (!"`" char)* "`" > ` ` ;

nonterminal-start <-
  "a"..."z" /
  "A"..."Z" /
  "-" /
  "_" ;

nonterminal-middle <-
  nonterminal-start /
  "0"..."9" ;

# Semantic value is the string's body.
string <-
  "'" val:< (!"'" char)* > "'" ` ` /
  '"' val:< (!'"' char)* > '"' ` ` /
  code:Unicode-code ` ` { val = "".force_encoding("UTF-8") << code } ;

# Semantic value is integer number.
Unicode-code <-
  "U+" code:< ("0"..."9" / "A"..."F")+ >
  { val = code.to_i(16) } ;

# Insignificant text.
` ` <-
  (white-space / comment)* ;

comment <-
  ("#" / "--") (!newline char)* newline ;

# White space as specified in "Unicode Standard Annex #44: Unicode Character
# Database" (http://www.unicode.org/reports/tr44, specifically
# http://www.unicode.org/Public/UNIDATA/PropList.txt).
white-space <-
  U+0009...U+000D /
  U+0020 /
  U+0085 /
  U+00A0 /
  U+1680 /
  U+180E /
  U+2000...U+200A /
  U+2028 /
  U+2029 /
  U+202F /
  U+205F /
  U+3000 ;

# Newline as specified in "Unicode Technical Report #13: Unicode Newline
# Guidelines" (http://unicode.org/unicode/standard/reports/tr13/tr13-5.html).
newline <-
  U+000D U+000A /
  U+000D /
  U+000A /
  U+0085 /
  U+000B /
  U+000C /
  U+2028 /
  U+2029 ;

%%
  
  # returns unique value on each call. The value starts with "yy_nonterm" and is
  # lowcase.
  def new_unique_nonterminal_method_name
    "yy_nonterm#{new_unique_number.to_s(36)}"
  end
  
  # returns unique number on each call.
  def new_unique_number
    result = @next_unique_number
    @next_unique_number += 1
    return result
  end
  
  # 
  # 
  # 
  def link(code, id_to_code)
    # Utilities.
    method_name = HashMap.new { |id| method_name[id] = new_unique_nonterminal_method_name }
    # Replace unknown codes with method calls (where possible).
    id_to_code.each do |id, _|
      code = code.replace_unknown_code(id, code("#{method_name[id]}"))
    end
    # Add definitions from +id_to_code+ to +code+.
    id_to_code.each do |id, code2|
      code += Definition[code(%(def #{method_name[id]}\n")) + code2 + code(%(\nend))]
    end
    #
    return code
  end
  
  # 
  # The Code consists of 2 parts: the code as such (which can be got with #to_s)
  # and code of definitions (which can be got with #definitions_to_s).
  # 
  # Abstract.
  # 
  class Code
    
    # defines abstract method.
    def self.abstract(method)
      define_method(method) { |*args| raise %(method `#{method}' is abstract) }
    end
    
    abstract :to_s
    
    def definitions_to_s
      ""
    end
    
    # 
    # returns this Code with UnknownCode-s having specified
    # UnknownCode#id (+id+) replaced with +code+.
    # 
    def replace_unknown_code(id, code)
      return self
    end
    
    # Non-overridable.
    def + other
      CodeConcatenation.new([self, other])
    end
    
    def inspect
      to_s
    end
    
  end
  
  class CodeAsString < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(string)
      @string = string
    end
    
    def to_s
      @string
    end
    
  end
  
  # returns CodeAsString.
  def code(string)
    CodeAsString.new(string)
  end
  
  class CodeConcatenation < Code
    
    def initialize(parts)
      @parts = parts
    end
    
    def replace_unknown_code(id, code)
      CodeConcatenation.new(@parts.map { |part| part.replace_unknown_code(id, code) })
    end
    
    def to_s
      @parts.map { |part| part.to_s }.join
    end
    
    def definitions_to_s
      @parts.map { |part| part.definitions_to_s }.join
    end
    
    def inspect
      @parts.map { |part| part.inspect }.join
    end
    
    def + other
      # Optimization.
      CodeConcatenation.new([*@parts, other])
    end
    
  end
  
  class UnknownCode < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(id)
      @id = id
    end
    
    attr_reader :id
    
    def replace_unknown_code(id, code)
      if self.id == id then code
      else self
      end
    end
    
    def to_s
      raise UnknownCodeEncountered, self
    end
    
    def inspect
      "???(#{id})"
    end
    
  end
  
  class UnknownCodeEncountered < Exception
    
    def initialize(code)
      super %(unknown code with id = #{code.id} is encountered)
      @code = code
    end
    
    attr_reader :code
    
  end
  
  # A code which goes to "definitions" section.
  class Definition < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(code)
      # Fix common errors.
      code = CodeAsString[code] if code.is_a? String
      # 
      @code = code
    end
    
    def replace_unknown_code(id, code)
      Definition.new(code.replace_unknown_code(id, code))
    end
    
    def to_s
      ""
    end
    
    def definitions_to_s
      @code.to_s + @code.definitions_to_s
    end
    
  end
  
end


if $0 == __FILE__
  File.open(ARGV[0]) do |io|
    PEGParserGenerator.new.call(io)
  end
end
