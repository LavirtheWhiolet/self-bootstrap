{...
#!/usr/bin/ruby
# encoding: UTF-8
}...

grammar <-
  {
    code = code("")
    rule_is_first = true
    method_names = HashMap.new
  }
  ` `
  (
    / @:(rule_pos) rule:(rule)
      {
        # Check that the rule is not defined twice.
        if method_names.has_key?(rule.name) then
          raise YY_SyntaxError.new(%(rule #{rule.name} is defined more than once), rule_pos)
        end
        # 
        if rule_is_first
          code += parser_entry_point_code("yy_parse", rule.method_name)
          code += auxiliary_parser_code
          rule_is_first = false
        end
        # 
        if rule.need_entry_point?
          code += parser_entry_point_code(rule.entry_point_method_name, rule.method_name)
        end
        #
        code += rule.method_definition
        # 
        method_names[rule.name] = rule.method_name
      }
    / Ruby-code:(code_insertion)
      {
        code += code_insertion
      }
  )*
  $
  {
    code = link(code, method_names)
    check_no_unresolved_code_in code
    print code
  } ;

{...
  
  def parser_entry_point_code(method_name, parsing_method_name)
    code %(
      
      # 
      # +input+ is IO. It must have working IO#pos, IO#pos= and
      # IO#set_encoding() methods.
      # 
      # It may raise YY_SyntaxError.
      # 
      def #{method_name}(input)
        input.set_encoding("UTF-8", "UTF-8")
        context = YY_ParsingContext.new(input)
        yy_from_pcv(
          #{parsing_method_name}(context) ||
          # TODO: context.worst_error can not be nil here. Prove it.
          raise(context.worst_error)
        )
      end

      # TODO: Allow to pass String to the entry point.
    )
  end
  
  # 
  # See source code.
  # 
  def link(code, method_names)
    code.map do |code_part|
      if code_part.is_a? UnknownMethodCall and method_names.has_key? code_part.nonterminal
        code "#{method_names[code_part.nonterminal]}(#{code_part.args_code.to_s})"
      else
        code_part
      end
    end
  end
  
  def check_no_unresolved_code_in code
    code.each do |code_part|
      case code_part
      when UnknownMethodCall
        raise YY_SyntaxError.new(%(rule #{code_part.nonterminal} is not defined), code_part.source_pos)
      when LazyRepeat::UnknownLookAheadCode
        raise YY_SyntaxError.new(%(at least one expression is expected to be in sequence with "*?" expression), code_part.source_pos)
      end
    end
  end
  
  def auxiliary_parser_code
    code %(
      
      # :nodoc:
      ### converts value to parser-compatible value (which is always non-false and
      ### non-nil).
      def yy_to_pcv(value)
        if value.nil? then :yy_nil
        elsif value == false then :yy_false
        else value
        end
      end
      
      # :nodoc:
      ### converts value got by #yy_to_pcv() to actual value.
      def yy_from_pcv(value)
        if value == :yy_nil then nil
        elsif value == :yy_false then false
        else value
        end
      end
      
      # :nodoc:
      class YY_ParsingContext
        
        # +input+ is IO.
        def initialize(input)
          @input = input
          @worst_error = nil
        end
        
        attr_reader :input
        
        # It is YY_SyntaxExpectationError or nil.
        attr_accessor :worst_error
        
        # adds possible error to this YY_ParsingContext.
        # 
        # +error+ is YY_SyntaxExpectationError.
        # 
        def << error
          # Update worst_error.
          if worst_error.nil? or worst_error.pos < error.pos then
            @worst_error = error
          elsif worst_error.pos == error.pos then
            @worst_error = @worst_error.or error
          end
          # 
          return self
        end
        
      end
      
      # :nodoc:
      def yy_string(context, string)
        # 
        string_start_pos = context.input.pos
        # Read string.
        read_string = context.input.read(string.bytesize)
        # Set the string's encoding; check if it fits the argument.
        unless read_string and (read_string.force_encoding(Encoding::UTF_8)) == string then
          # 
          context << YY_SyntaxExpectationError.new(yy_displayed(string), string_start_pos)
          # 
          return nil
        end
        # 
        return read_string
      end
      
      # :nodoc:
      def yy_end?(context)
        #
        if not context.input.eof?
          context << YY_SyntaxExpectationError.new("the end", context.input.pos)
          return nil
        end
        #
        return true
      end
      
      # :nodoc:
      def yy_begin?(context)
        #
        if not (context.input.pos == 0)
          context << YY_SyntaxExpectationError.new("the beginning", context.input.pos)
          return nil
        end
        #
        return true
      end
      
      # :nodoc:
      def yy_char(context)
        # 
        char_start_pos = context.input.pos
        # Read a char.
        c = context.input.getc
        # 
        unless c then
          #
          context << YY_SyntaxExpectationError.new("a character", char_start_pos)
          #
          return nil
        end
        #
        return c
      end
      
      # :nodoc:
      def yy_char_range(context, from, to)
        # 
        char_start_pos = context.input.pos
        # Read the char.
        c = context.input.getc
        # Check if it fits the range.
        # NOTE: c has UTF-8 encoding.
        unless c and (from <= c and c <= to) then
          # 
          context << YY_SyntaxExpectationError.new(%(\#{yy_displayed from}\...\#{yy_displayed to}), char_start_pos)
          # 
          return nil
        end
        #
        return c
      end
      
      # :nodoc:
      ### The form of +string+ suitable for displaying in messages.
      def yy_displayed(string)
        if string.length == 1 then
          char = string[0]
          char_code = char.ord
          case char_code
          when 0x00...0x20 then %(\#{yy_unicode_s char_code})
          when 0x20...0x80 then %("\#{char}")
          when 0x80...Float::INFINITY then %("\#{char} (\#{yy_unicode_s char_code})")
          end
        else
          %("\#{string}")
        end
      end
      
      # :nodoc:
      ### "U+XXXX" string corresponding to +char_code+.
      def yy_unicode_s(char_code)
        "U+\#{"%04X" % char_code}"
      end
      
      class YY_SyntaxError < Exception
        
        def initialize(message, pos)
          super(message)
          @pos = pos
        end
        
        attr_reader :pos
        
      end
      
      # :nodoc:
      class YY_SyntaxExpectationError < YY_SyntaxError
        
        # 
        # +expectations+ are String-s.
        # 
        def initialize(*expectations, pos)
          super(nil, pos)
          @expectations = expectations
        end
        
        # 
        # returns other YY_SyntaxExpectationError with #expectations combined.
        # 
        # +other+ is another YY_SyntaxExpectationError.
        # 
        # #pos of this YY_SyntaxExpectationError and +other+ must be equal.
        # 
        def or other
          raise %(can not "or" \#{YY_SyntaxExpectationError}s with different pos) unless self.pos == other.pos
          YY_SyntaxExpectationError.new(*(self.expectations + other.expectations), pos)
        end
        
        def message
          expectations = self.expectations.uniq
          [expectations[0...-1].join(", "), expectations[-1]].join(" or ") + " is expected"
        end
        
        protected
        
        # Private
        attr_reader :expectations
        
      end
    )
  end
  
}...

expr: Code <-
  expr20:val ;

expr20: Code <-
  # Ordered choice.
  {
    single_expression = true
    remembered_pos_var = new_unique_variable_name
  }
  `/`? expr30:val (
    `/` expr30:val2
    {
      single_expression = false
      val = val + (code " or (yy_context.input.pos = #{remembered_pos_var}; ") + val2 + (code ")")
    }
  )*
  {
    if not single_expression then
      val = (code "begin; #{remembered_pos_var} = yy_context.input.pos; ") + val + (code "; end")
    end
  } ;

expr30: Code <-
  # Sequence.
  # One-side bracket.
  { code_parts = [] } 
  (
    / expr60:code_part  { code_parts.add code_part }
    / `]`  { code_parts = [sequence_code(code_parts)] }
  )+
  {val = sequence_code(code_parts)} ;

{...
  
  def sequence_code(sequence_parts)
    # 
    lazy_kleene_star_part_index =
      sequence_parts.find_index { |sequence_part| sequence_part.any? { |code_part| code_part.is_a? LazyRepeat::UnknownLookAheadCode } }
    # Compile parts after "*?" part as look ahead of the "*?" part
    # (if possible).
    if lazy_kleene_star_part_index and lazy_kleene_star_part_index != (sequence_parts.size - 1)
      lazy_kleene_star_part = sequence_parts[lazy_kleene_star_part_index]
      sequence_parts_after_lazy_kleene_star_part = sequence_parts[(lazy_kleene_star_part_index+1)..-1]
      lazy_kleene_star_part = lazy_kleene_star_part.replace(
        LazyRepeat::UnknownLookAheadCode,
        sequence_code(sequence_parts_after_lazy_kleene_star_part)
      )
      sequence_parts[lazy_kleene_star_part_index] = lazy_kleene_star_part
    end
    # Compile the code parts into sequence code!
    if sequence_parts.size == 1
      sequence_parts.first
    else
      code("(") + sequence_parts.reduce { |r, sequence_part| r + code(" and ") + sequence_part } + code(")")
    end
  end
  
}...

expr60: Code <-
  # Capture/append semantic value.
  / expr70:c capture-delimiter:t capture-target-variable:var { val = capture_semantic_value_code(var, c, t) }
  / expr70:val
  ;

{...
  
  # 
  # +capture_type+ may be:
  # 
  # [:capture] "Capture the semantic value to +target_var+"
  # [:append]  "Append semantic value to +target_var+ using "<<" operator".
  # 
  def capture_semantic_value_code(target_var, code, capture_type)
    parse_result_var = new_unique_variable_name
    capture_operator =
      case capture_type
      when :capture then "="
      when :append then "<<"
      else raise %(capture_type #{capture_type.inspect} is not supported)
      end
    #
    code(%(begin
      #{parse_result_var} = )) + code + code(%(
      if #{parse_result_var} then
        #{target_var} #{capture_operator} yy_from_pcv(#{parse_result_var})
      end
      #{parse_result_var}
    end))
  end
  
}...

expr70 <-
  # Predicate.
  / `&` Ruby-code:(predicate_code) { val = positive_predicate_with_native_code_code(predicate_code) }
  / `&` expr70:(val) { val = positive_predicate_code(val) }
  / `!` expr70:(val) { val = negative_predicate_code(val) }
  / expr80:val
  ;

{...
  
  def positive_predicate_with_native_code_code(native_code)
    code(%(begin \n )) + native_code + code(%( \n end))  # Newlines are needed because native_code may contain comments.
  end
  
  def positive_predicate_code(code)
    stored_pos_var = new_unique_variable_name
    result_var = new_unique_variable_name
    #
    code(%(begin
      #{stored_pos_var} = yy_context.input.pos
      #{result_var} = )) + code + code(%(
      yy_context.input.pos = #{stored_pos_var}
      #{result_var}
    end))
  end
  
  def negative_predicate_code(code)
    stored_worst_error_var = new_unique_variable_name
    # 
    code(%(begin
      #{stored_worst_error_var} = yy_context.worst_error
      begin
        not )) + positive_predicate_code(code) + code(%(
      ensure
        yy_context.worst_error = #{stored_worst_error_var}
      end
    end))
  end

}...

expr80: Code <-
  # Repetition.
  expr90:val (
    @:(p) `*?` { val = lazy_repeat_code(val, p) } /
    `*` { val = repeat_many_times_code(val) } /
    `+` { val = repeat_at_least_once_code(val) } /
    `?` { val = optional_code(val) }
  )* ;

{...
  
  # 
  # +source_pos+ is position in source code the "lazy repeat" code is compiled
  # from.
  # 
  def lazy_repeat_code(parsing_code, source_pos)
    #
    original_pos_var = new_unique_variable_name
    result_var = new_unique_variable_name
    #
    code(%[ begin
      while true
        ###
        #{original_pos_var} = yy_context.input.pos
        ### Look ahead.
        #{result_var} = ]) + LazyRepeat::UnknownLookAheadCode[source_pos] + code(%[
        yy_context.input.pos = #{original_pos_var}
        break if #{result_var}
        ### Repeat one more time (if possible).
        #{result_var} = ]) + parsing_code + code(%[
        if not #{result_var} then
          yy_context.input.pos = #{original_pos_var}
          break
        end
      end
      ### The repetition is always successful.
      true
    end ])
  end
  
  def repeat_many_times_code(code)
    stored_pos_var = new_unique_variable_name
    #
    code(%(while true
      #{stored_pos_var} = yy_context.input.pos
      if not )) + code + code(%( then
        yy_context.input.pos = #{stored_pos_var}
        break true
      end
    end))
  end
  
  def repeat_at_least_once_code(code)
    code + code(%( and )) + repeat_many_times_code(code)
  end
  
  def optional_code(code)
    stored_pos_var = new_unique_variable_name
    #
    code(%(begin
      #{stored_pos_var} = yy_context.input.pos
      if not )) + code + code(%( then
        yy_context.input.pos = #{stored_pos_var}
      end
      true
    end))
  end
  
}...

expr90: Code <-
  # Parentheses.
  `(` expr:val `)` /
  # Capture/append text.
  `<` expr:c `>` capture-delimiter:t capture-target-variable:var { val = capture_text_code(var, c, t) } /
  # 
  expr100:val ;

{...
  
  # returns code which captures text to specified variable.
  # 
  # +capture_type+ may be one of the following:
  # 
  # [:capture] "Capture the text into the variable +target_variable_name+"
  # [:append]  "Append the text to the variable +target_variable_name+"
  # 
  def capture_text_code(target_variable_name, parsing_code, capture_type)
    #
    init_target_variable_code =
      case capture_type
      when :capture then %(#{target_variable_name} = "")
      when :append then %()
      else raise %(capture_type #{capture_type.inspect} is not supported)
      end
    start_pos_var = new_unique_variable_name
    end_pos_var = new_unique_variable_name
    # 
    code(%(begin
      #{init_target_variable_code}
      #{start_pos_var} = yy_context.input.pos
      )) +
      parsing_code + code(%( and begin
        #{end_pos_var} = yy_context.input.pos
        yy_context.input.pos = #{start_pos_var}
        #{target_variable_name} << yy_context.input.read(#{end_pos_var} - #{start_pos_var}).force_encoding(Encoding::UTF_8)
      end
    end))
  end
  
}...

expr100: Code <-
  / char-range:r  { val = code "yy_char_range(yy_context, #{r.begin.to_ruby_code}, #{r.end.to_ruby_code})" }
  / string:s  { val = code "yy_string(yy_context, #{s.to_ruby_code})" }
  / @:(n_pos) nonterminal:n  { val = UnknownMethodCall[n, %(yy_context), n_pos] }
  / `char` { val = code "yy_char(yy_context)" }
  / Ruby-code:(action_code)  { val = to_action_expression(action_code) }
  / `$` { val = code "yy_end?(yy_context)" }
  / `^` { val = code "yy_begin?(yy_context)" }
  / (
      / `@``=` Ruby-variable:(pos_variable)
      / `at` Ruby-variable:(pos_variable)
    ) `:`?
    { val = code "(yy_context.input.pos = #{pos_variable}; true)" }
  / `@` { val = code "yy_context.input.pos" }
  ;

{...
  
  def to_action_expression(action_code)
    # Validate action code.
    begin
      RubyVM::InstructionSequence.compile(action_code.to_s)
    rescue SyntaxError => e
      raise YY_SyntaxError.new("syntax error", action_code.pos)
    end
    # Compile the expression!
    code(%(begin
      )) + action_code + code(%(
      true
    end))
    # NOTE: Newline must be present after action's body because it may include
    # comments.
  end
  
}...

rule: Rule <-
  { rule = val = Rule.new }
  -- rule name --
  (
    / Ruby-method-name:(rule_name) `(` (`...` / Ruby-local-variable)? `)` { rule.need_entry_point! }
    / nonterminal:(rule_name)
  )
  { rule.name = rule_name }
  -- semantic value type --
  (`:` rule-type)?
  --
  `<-/=`
  -- right part --
  expr:(c) `;`
  { rule.method_definition = to_method_definition(c, rule.method_name) }
  ;

{...
  
  def to_method_definition(code, method_name)
    code(%(
      # :nodoc:
      def #{method_name}(yy_context)
        val = :yy_nil
        )) + code + code(%( and yy_to_pcv(val)
      end
    ))
  end
  
}...

rule-type <-
  ((!`<-/=` char) ` `)+ ;

capture-target-variable: String <-
  / Ruby-variable:val
  / `(` Ruby-variable:val `)`
  ;

# Semantic value is :capture or :append.
capture-delimiter: Symbol <-
  / `:` {val = :capture}
  / `:+` {val = :append}
  / `:>>` {val = :append}
  ;

{...

  # [line, column] corresponding to position in +io+ (+pos+).
  def line_and_column(pos, io)
    @pos = pos
    io.pos = 0
    return line_and_column0(io)
  end

}...

# 
# It expects +@pos+ to be position in input and returns [line, column]
# corresponding to that position.
# 
line_and_column0(): [Integer, Integer] <-
  { current_line_and_column = [1, 1] }
  (
    @:current_pos
    { if current_pos == @pos then val = current_line_and_column.dup; end }
    (
      / newline { current_line_and_column[0] += 1; current_line_and_column[1] = 1 }
      / char { current_line_and_column[1] += 1 }
    )
  )*
  ;

---- Lexemes ----

`%%` <-
  "%%" char*? (newline / $) ;

Ruby-code: Code <-
  (
    / "{" white-space* "..." (white-space*? newline)? < char*? >:val ("..." white-space* "}" / "}" white-space* "...")
    / < Ruby-code-body >:val { val = val[1...-1] }
    / (
        `%%`
        < char*? >:val
        `%%`
      )
    / (
        `%%`
        < char* >:val
        $
      )
  )
  ` `
  { val = code(val) }
  ;

Ruby-code-body <-
  "{" (Ruby-code-body / char)*? "}" ;

`<-/=` <- ("<-" / "=" / U+2190) ` `;
`:` <- ":" (!"+" !">>") ` `;
`:+` <- ":+" ` `;
`:>>` <- ":>>" ` `;
`;` <- ";" ` `;
`/` <- "/" ` `;
`$` <- "$" ` `;
`^` <- "^" ` `;
`(` <- "(" ` `;
`)` <- ")" ` `;
`[` <- "[" ` `;
`]` <- "]" ` `;
`<` <- "<" ` `;
`>` <- ">" ` `;
`*` <- "*" ` `;
`*?` <- "*?" ` `;
`?` <- "?" ` `;
`+` <- "+" ` `;
`&` <- "&" ` `;
`!` <- "!" ` `;
`@` <- "@" ` `;
`=` <- "=" ` `;
`...` <- "..." ` `;

`char` <- "char" !nonterminal-middle ` `;
`at` <- "at" !nonterminal-middle ` `;
keyword <-
  / `char`
  / `at`
  ;

Ruby-variable: String <-
  < ("@" / "$")? Ruby-variable-start (Ruby-variable-middle)* >:val ` `;

Ruby-local-variable <-
  < Ruby-variable-start (Ruby-variable-middle)* >:val ` `;

Ruby-variable-start <-
  "a"..."z" /
  "_" ;

Ruby-variable-middle <-
  Ruby-variable-start /
  "0"..."9" ;

Ruby-method-name: String <-
  < Ruby-method-name-start (Ruby-method-name-middle)* >:val ` `;

Ruby-method-name-start <-
  / "a"..."z"
  / "_"
  ;

Ruby-method-name-middle <-
  / Ruby-method-name-start
  / "0"..."9"
  ;

# TODO: Extract ` ` outside of the parentheses.
nonterminal: Nonterminal <-
  !keyword
  (
    < nonterminal-start (nonterminal-middle)* >:val ` ` /
    < "`" char*? "`" >:val ` `
  ) ;

nonterminal-start <-
  "a"..."z" /
  "A"..."Z" /
  "-" /
  "_" ;

nonterminal-middle <-
  nonterminal-start /
  "0"..."9" ;

char-range: Range[String] <-
  string:from ("..." / ".." / U+2026 / U+2025) ` ` string:to ` `
  { raise %("#{from}" or "#{to}" is not a character) if from.length != 1 or to.length != 1 }
  { val = from...to } ;

# TODO: Tell that all String-s are encoded in UTF-8.

string: String <-
  (
    "'" < char*? >:val "'" /
    '"' < char*? >:val '"' /
    Unicode-code:code { val = "" << code }
  )
  ` ` ;

Unicode-code: Integer <-
  "U+" < ("0"..."9" / "A"..."F")+ >:code { code  = code.to_i(16); raise %(U+#{code.to_s(16).upcase} is not supported) if code > 0x10FFFF }
  { val = code } ;

# Insignificant text.
` ` <-
  (white-space / comment)* ;

comment <-
  ("#" / "--") char*? (newline / $) ;

# White space as specified in "Unicode Standard Annex #44: Unicode Character
# Database" (http://www.unicode.org/reports/tr44, specifically
# http://www.unicode.org/Public/UNIDATA/PropList.txt).
white-space <-
  U+0009...U+000D /
  U+0020 /
  U+0085 /
  U+00A0 /
  U+1680 /
  U+180E /
  U+2000...U+200A /
  U+2028 /
  U+2029 /
  U+202F /
  U+205F /
  U+3000 ;

# Newline as specified in "Unicode Technical Report #13: Unicode Newline
# Guidelines" (http://unicode.org/unicode/standard/reports/tr13/tr13-5.html).
newline <-
  U+000D U+000A /
  U+000D /
  U+000A /
  U+0085 /
  U+000B /
  U+000C /
  U+2028 /
  U+2029 ;

---- Library ----

{...

class String
  
  # returns Ruby code which evaluates to this String.
  def to_ruby_code
    self.dump
  end
  
end


class UniqueNumber
  
  begin
    @@next = 0
  end

  def self.new
    @@next.tap { @@next += 1 }
  end

end


# The value starts with "yy_var" and is lowcase.
def new_unique_variable_name
  "yy_var#{UniqueNumber.new.to_s(36)}"
end


# The value starts with "yy_nonterm" and is lowcase.
def new_unique_nonterminal_method_name
  "yy_nonterm#{UniqueNumber.new.to_s(36)}"
end


HashMap = Hash


RubyCode = String


Nonterminal = String


# TODO: Replace String with Nonterminal where it is needed.


class Code
  
  # defines abstract method.
  def self.abstract(method)
    define_method(method) { |*args| raise %(method `#{method}' is abstract) }
  end
  
  abstract :to_s
  
  # Not overridable.
  def + other
    CodeConcatenation.new([self, other])
  end
  
  # 
  # passes every atomic Code comprising this Code and returns this Code with
  # the atomic Code-s replaced with what +block+ returns.
  # 
  def map(&block)
    block.(self)
  end
  
  # 
  # passes every atomic Code comprising this Code to +block+.
  # 
  # It returns this Code.
  # 
  # Not overridable.
  # 
  def each(&block)
    map do |part|
      block.(part)
      part
    end
  end
  
  # 
  # The same as Enumerable#reduce(initial) <tt>{ |memo, obj| block }</tt> or
  # Enumerable#reduce <tt>{ |memo, obj| block }</tt> where +obj+ is one of
  # atomic Code-s comprising this Code.
  # 
  # Not overridable.
  # 
  def reduce(initial = nil, &block)
    # TODO: Optimize.
    result = initial
    self.map { |code_part| result = block.(result, code_part); code_part }
    return result
  end
  
  # returns true if +predicate+ returns true for any atomic Code comprising
  # this code.
  def any?(&predicate)
    self.reduce(false) { |result, part| result or predicate.(part) }
  end
  
  # 
  # replaces each atomic Code which comprises this Code and is case-equal to
  # +pattern+ with +replacement+.
  # 
  def replace(pattern, replacement)
    self.map do |code_part|
      if pattern === code_part then
        replacement
      else
        code_part
      end
    end
  end
  
end


class CodeAsString < Code
  
  class << self
    
    alias [] new
    
  end
  
  def initialize(string)
    @string = string
  end
  
  def to_s
    @string
  end
  
  def inspect
    "#<CodeAsString: #{@string.inspect}>"
  end
  
end


# returns CodeAsString.
def code(string)
  CodeAsString.new(string)
end


class CodeConcatenation < Code
  
  def initialize(parts)
    @parts = parts
  end
  
  def to_s
    @parts.map { |part| part.to_s }.join
  end
  
  def + other
    # Optimization.
    CodeConcatenation.new([*@parts, other])
  end
  
  def map(&block)
    CodeConcatenation.new(@parts.map { |part| part.map(&block) })
  end
  
  def inspect
    "#<CodeConcatenation: #{@parts.map { |p| p.inspect }.join(", ")}>"
  end
  
end


class UnknownMethodCall < Code
  
  class << self
    
    alias [] new
    
  end
  
  def initialize(nonterminal, args_code, source_pos)
    @nonterminal = nonterminal
    @args_code = args_code
    @source_pos = source_pos
  end
  
  # Nonterminal associated with this UnknownMethodCall.
  attr_reader :nonterminal
  
  # Code of arguments of this call (as String).
  attr_reader :args_code
  
  # Position in source code of this UnknownMethodCall.
  attr_reader :source_pos
  
  def to_s
    raise CodeCanNotBeDetermined.new self
  end
  
  def inspect
    "#<UnknownMethodCall: @nonterminal=#{@nonterminal.inspect}>"
  end
  
end


module LazyRepeat
  
  class UnknownLookAheadCode < Code
    
    class << self
      
      alias [] new
      
    end
    
    def initialize(source_pos)
      @source_pos = source_pos
    end
    
    def to_s
      raise CodeCanNotBeDetermined.new self
    end
    
    # Position in source code associated with this UnknownLookAheadCode.
    attr_reader :source_pos
    
    def inspect
      "#<LazyRepeat::UnknownLookAheadCode>"
    end
    
  end
  
end


class CodeCanNotBeDetermined < Exception
  
  def initialize(code)
    super %(code can not be determined: #{code.inspect})
    @code = code
  end
  
  attr_reader :code
  
end


class Array
  
  alias add <<
  
end


class Rule

  def initialize()
    @need_entry_point = false
    @method_name = new_unique_nonterminal_method_name
  end

  # Nonterminal
  attr_accessor :name
  
  # Definition of method implementing this Rule.
  # 
  # It is Code.
  # 
  attr_accessor :method_definition

  # MethodName
  attr_reader :method_name

  # Default is false.
  def need_entry_point?
    @need_entry_point
  end

  # sets #need_entry_point? to true.
  def need_entry_point!
    @need_entry_point = true
  end

  def entry_point_method_name
    name
  end

end

...}

---- Launcher ----

{...

begin
  grammar_file = ARGV[0] or abort %(Usage: ruby #{__FILE__} grammar-file)
  File.open(grammar_file) do |io|
    begin
      yy_parse(io)
    rescue PEGParserGenerator::YY_SyntaxError => e
      line, column = *(line_and_column(e.pos, io))
      STDERR.puts %(#{grammar_file}:#{line}:#{column}: error: #{e.message})
      exit 1
    end
  end
end

}...
