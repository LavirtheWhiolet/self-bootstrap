Code = CodeString | CodeConcatenation.

Ctor CodeString str:String.

Ctor CodeConcatenation parts.
Theorem: forall c, parts: c = CodeConcatenation parts -> all (parts c) (_ `is` Code)

code1:(CodeConcatenation) + code2:(Code) : Code =
  CodeConcatenation (append (parts code1) code2).
code1:(Code) + code2:(Code) =
  CodeConcatenation (code1 :: code2 :: EmptyList).

Ctor Pos pos:Natural.

Ctor List type.
x `is` List type = all x (\item -> item `is` type).

Ctor EmptyList.
Ctor item :: list.

all list predicate =
  if list:
    is x :: xs then (predicate x) and all xs predicate
    is EmptyList then true
.

link data codes:(List Code) =
  if codes is:
    x :: xs then ...
    EmptyList then EmptyList
.

Native ctor IO.

open World filename:String : IO = ...

read input:IO n:Natural = ...

--
Ctor List x xs.
->

Ctor Array type.
Ctor List type.

Enumerable type = {Array type, List type}.

x `:` (Enumerable type) = all x (\item => item is type).
# <=> x `:` (Array type | List type) = ...

select list:(Enumerable _) predicate =
  if empty list then
    []
  else
    item = first list
    rest_result = select (rest list) predicate
    if predicate item then
      item :: rest_result
    else
      rest_result
