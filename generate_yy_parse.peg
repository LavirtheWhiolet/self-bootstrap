{...

module Concatenable
  
  def + other
    case other
    when Concatenation
      Concatenation.new([self] + other.parts)
    else
      Concatenation.new([self, other])
    end
  end
  
end


class Concatenation
  
  include Concatenable
  
  # 
  # +parts+ is value for #parts.
  # 
  def initialize(parts)
    @parts = parts
  end
  
  def + other
    case other
    when Concatenation then
      Concatenation.new(self.parts + other.parts)
    else
      Concatenation.new(self.parts + [other])
    end
  end
  
  # Array of Concatenable.
  attr_reader :parts
  
end

}...